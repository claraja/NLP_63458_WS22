- Welche Alternativen zu einer Implementierung einer vergleichbaren Funktionaliät gegenüber spaCy gibt es. Wo liegen ggf. Vor- und Nachteile?

Für den im November 2022 veröffentlichten Chatbot ChatGPT von OpenAI steht eine Python-API (https://platform.openai.com/docs/guides/chat/chat-vs-completions) zur Verfügung, über die Antworten des bereits trainierten Chatbot eingeholt werden können. Man kann dem Chatbot zum Beispiel sagen "Erstelle eine Ausgabe im RDF-Format mit Krankheiten und Symptomen aus dem folgenden Text: <Beispiel-Text>". Daraufhin erstellt ChatGPT eine Ausgabe im RDF-Format, die für einige getestete Texte sehr ähnlich der entsprechenden Ausgabe des MedExtractors ist.
Der Vorteil von ChatGPT ist seine sehr umfassende Datenbasis. Als Nachteile stehen dem jedoch die unklare und unsichere Datenschutzsituation gegenüber, was ihn in der derzeitigen Form keinesfalls für einen tatsächlichen Einsatz in Beratungssituationen disqualifizieren würde. Zudem ist er nicht auf psychotherapeutische Fachgespräche trainiert, sondern liefert sehr allgemein gehaltene Antworten, die keine verlässlichen Therapieaussagen enthalten.

Die kommerziellen Entwicklungen im NLP-Bereich sind derzeit sehr aktiv und neben ChatGPT existieren weitere trainierte Modelle:
BERT
Stanford CoreNLP
Gensim
(LaMDA, BARD)

Die Funktion, die der EntityRuler von spaCy aktuell im MedExtractor übernimmt, könnte im 
Prinzip mit zwei Sets für Krankheiten und Symptome ersetzt werden. Für jeden Satz würde 
dann überprüft, ob dieser Krankheiten und Symptome enthält, und diese Krankheiten dann mit 
den Symptomen in Verbindung gebracht.
Das wäre eine Alternativlösung, weil es bisher nur die Unterteilung in Symptome und 
Krankheiten gibt. Wollte man weitere Informationen aus den Texten extrahieren, müsste
man weitere Kategorien einführen, mit denen es schnell unübersichtlicher (und vermutlich auch 
weniger performant) werden könnte als mit dem EntityRuler.

Beispiel:
from itertools import product
diseases = {'depression', 'bulimia', 'dementia'}
symptoms = {'anxiety', 'breathlessness', 'binge eating', 'loss of interest'}
sentence = 'Anxiety is a symptom of depression'
found_diseases = diseases.intersection(set(sentence.lower().split(' ')))
found_symptoms = symptoms.intersection(set(sentence.lower().split(' ')))
extracted_relations = set(product(found_diseases, found_symptoms))


- Ihr Ausblick bezieht sich auf die weitere Verwendung einer weiteren spaCy Komponente. Wo sehen Sie weiteres Potenzial für künftige aufbauende Forschungsarbeiten (ggf. auch aus "strategischer" Sicht)?


Auf der Hugging-Face-Plattform werden vortrainierte Modelle und Datensätze bereitgestellt, unter anderem auch zu psychologischen Themen wie https://huggingface.co/nlp4good/psych-search?text=If+you%27re+depressed%2C+you+may+feel+%5BMASK%5D, auf die mit einem spaCy-Paket zugegriffen werden kann (https://spacy.io/universe/project/spacy-transformers). Es könnte versucht werden diese Modelle für die Zwecke des MedExtractrs anzupassen, bzw. die Implementierung des MedExtractors so anzupassen, dass diese Modelle gewinnbringend eingesetzt werden können.

Sollte es möglich sein, Zugriff auf Skripte von Gesprächen zwischen psychologischen Fachkräften und Patient:innen zu erhalten, können diese als Grundlage für das Training von Sprachmodellen dienen. Beispielsweise enthält das Handbuch ... eine Vielzahl von Beispieldialogen aus Therapiesitzungen.

Insgesamt sind in dem sehr sensiblen Bereich der Kommunikation zu medizinischen Sachverhalten besonders hohe Datenschutzanforderungen zu erfüllen, damit keine personengebundenen Daten in (öffentlich zugängliches) Trainingsmaterial für Sprachmodelle gelangen.

Weiterhin könnte man sich damit beschäftigen, wie möglichst automatisiert (mit einem Webcrawler) weitere medizinische Texte zum Trainieren der Modelle im Web gefunden werden können.

- Fehlerkorrektur, Sentiment Analysis